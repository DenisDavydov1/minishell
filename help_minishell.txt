

to do list:
1.  при запуске минишелла удалять значение переменной  old_pwd, при переходе записывать в нее предыдущий путь
2. export не должен добавлять переменную с цифрой в начале названия (bash: export: `7aa=asdf': not a valid identifier)
3. экспорт не должен добавлять если вокруг равно есть пробелы (bash: export: `=': not a valid identifier)
4. export export oooo=(rty rty w) делает запись: declare -ax oooo='([0]="rty" [1]="rty" [2]="w")'
5. export oooo=rty rty w делает три записи: declare -x oooo="rty", declare -x rty, declare -x w

6. cd ~, cd .., cd /

7.  cat "a b"
    cat: a b: No such file or directory

8.  echo n m
    n m




> не должен перезаписывать файл полностью, а должен записать сначала файла


 # | Expression  | Result      | Comments
---+-------------+-------------+--------------------------------------------------------------------
 1 | "$a"        | apple       | variables are expanded inside ""
 2 | '$a'        | $a          | variables are not expanded inside ''
 3 | "'$a'"      | 'apple'     | '' has no special meaning inside ""
 4 | '"$a"'      | "$a"        | "" is treated literally inside ''
 5 | '\''        | **invalid** | can not escape a ' within ''; use "'" or $'\'' (ANSI-C quoting)
 6 | "red$arocks"| red         | $arocks does not expand $a; use ${a}rocks to preserve $a
 7 | "redapple$" | redapple$   | $ followed by no variable name evaluates to $
 8 | '\"'        | \"          | \ has no special meaning inside ''
 9 | "\'"        | \'          | \' is interpreted inside "" but has no significance for '
10 | "\""        | "           | \" is interpreted inside ""
11 | "*"         | *           | glob does not work inside "" or ''
12 | "\t\n"      | \t\n        | \t and \n have no special meaning inside "" or ''; use ANSI-C quoting
13 | "`echo hi`" | hi          | `` and $() are evaluated inside ""
14 | '`echo hi`' | `echo hi`   | `` and $() are not evaluated inside ''
15 | '${arr[0]}' | ${arr[0]}   | array access not possible inside ''
16 | "${arr[0]}" | apple       | array access works inside ""
17 | $'$a\''     | $a'         | single quotes can be escaped inside ANSI-C quoting
18 | "$'\t'"     | $'\t'       | ANSI-C quoting is not interpreted inside ""
19 | '!cmd'      | !cmd        | history expansion character '!' is ignored inside ''
20 | "!cmd"      | cmd args    | expands to the most recent command matching "cmd"
21 | $'!cmd'     | !cmd        | history expansion character '!' is ignored inside ANSI-C quotes
---+-------------+-------------+--------------------------------------------------------------------



QUOTES

MYVAR=sometext
echo "double quotes gives you $MYVAR"
echo 'single quotes gives you $MYVAR'

will give this:

double quotes gives you sometext
single quotes gives you $MYVAR



PIPES

echo a | cat -e < 2
эквивалентно 
echo a > aa
cat -e < aa < 2


Hidden variables
a=5
echo $a


> file 
должно создавать пустой файл либо делать пустым существующий

< file
не делает ничего

<> file
не делает ничего